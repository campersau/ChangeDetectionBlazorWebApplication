@page "/"
@page "/{id}"
@inject UserRepository UserRepository
@implements INotifyPropertyChanged
@implements IDisposable

<h1>Users</h1>

@if (Users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button @onclick(AddUser)>Add User</button>

    <table class='table'>
        <thead>
            <tr>
                <th>Id</th>
                <th>Username</th>
                <th>User Groups</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@string.Join(", ", user.UserGroups)</td>
                    <td><a href="/@(user.Id)">Edit</a> <a href="#" @onclick(() => RemoveUser(user))>Remove</a></td>
                </tr>
            }
        </tbody>
    </table>

    <hr />

    <EditUserComponent Id="@Id" />
}

@functions {

    public string Id { get; set; }

    private ICollection<User> _users;
    public ICollection<User> Users
    {
        get => _users;
        set { _users = value; FirePropertyChanged(); }
    }

    private ChangeDetector changeDetector;

    protected override void OnInit()
    {
        changeDetector = ChangeDetector.Create(this, StateHasChanged);

        Users = UserRepository.GetUsers();
    }

    private void AddUser()
    {
        Users.Add(new User());
    }

    private void RemoveUser(User user)
    {
        Users.Remove(user);

        if (user.Id == Id)
        {
            Id = null;
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void FirePropertyChanged([CallerMemberName] string propertyName = "") => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));

    public void Dispose()
    {
        changeDetector.Dispose();
    }

}
